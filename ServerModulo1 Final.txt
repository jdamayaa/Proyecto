import anvil.server
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime

@anvil.server.callable
def create_scatter_plot(x_values_temp, y_values_temp, y_values_hum):
  #print(x_values_temp)
  #print(y_values_temp)
  #print(y_values_hum)

  last_x_times = []
  last_y_temp = []
  last_y_hum = []

  #print(f'las x times{last_x_times}')
  #print(last_y_hum)
  #print(last_y_temp)

  # Recorrer la lista de fechas
  for i, item in enumerate(x_values_temp):
    if isinstance(item, list) and len(item) == 5:  # Verificar si es una lista con 5 elementos
      try:
        # Asegurarse de que el año tenga 4 dígitos
        year = item[0]
        if year < 100:  # Si el año tiene dos dígitos, lo convertimos en cuatro
          year += 2000  

          # Evitar procesar fechas incorrectas como [2021, 1, 1, 0, 0]
        if year == 2021 and item[1] == 1 and item[2] == 1 and item[3] == 0 and item[4] == 0:
          print("Fecha incorrecta detectada: ", item)
          continue  # Saltar esta entrada incorrecta

          # Convertir la lista de enteros en un objeto datetime
        fecha_obj = datetime(item[0], item[1], item[2], item[3], item[4])
        formatted_fecha = fecha_obj.strftime('%Y-%m-%d %H:%M')
          #print(formatted_fecha)

          # Agregar los valores correspondientes de las otras listas (temperatura y humedad)
        last_x_times.append(formatted_fecha)
        last_y_temp.append(y_values_temp[i])
        last_y_hum.append(y_values_hum[i])
        #print(last_y_temp)

      except Exception as e:
        print(f"Error al convertir la fecha: {e}")

    else:
      print("Valor no es una lista de fecha válida: ")

    # Crear un DataFrame a partir de las listas
  data = pd.DataFrame({
    'x': last_x_times,
    'y': last_y_temp,
    'y_2': last_y_hum
  })

  
  # Crear la figura
  fig = go.Figure()
 
  # Agregar el gráfico de dispersión para la temperatura
  fig.add_trace(go.Scatter(
    x=data['x'].tolist(),
    y=data['y'].tolist(),
    mode='markers+lines',  # Muestra tanto los puntos como las líneas
    name='Temperatura °C',
    marker=dict(color='blue')
  ))
  
   #Agregar el gráfico de dispersión para la humedad
  fig.add_trace(go.Scatter(
    x=data['x'].tolist(),
    y=data['y_2'].tolist(),
    mode='markers+lines',  # Solo los puntos sin líneas de conexión
    name='Humedad %',
    marker=dict(color='orange')
  ))
  fig.update_layout(
    title='Temperatura y Humedad vs Tiempo',
    xaxis=dict(
      rangeselector=dict(
        buttons=list([
          #dict(count=2, label="Todo", step="day", stepmode="backward"),
          dict(count=1, label="Todo", step="day", stepmode="backward"),
          dict(count=1, label="Hoy", step="day", stepmode="todate"),
          dict(count=5, label="Últimas 5 horas", step="hour", stepmode="backward"),
          dict(count=2, label="Última hora", step="hour", stepmode="backward")
        ])
      ),
      rangeslider=dict(visible=True),  # Esto agrega una barra para hacer zoom
      type="date"
    ),
    yaxis=dict(
    title='Valor'
  ),
  legend=dict(
    title='Variables:         ',
    orientation='h',
    yanchor='bottom',
    y=1.02,
    xanchor='right',
    x=1
  ),
  margin=dict(l=40, r=40, t=80, b=40)
)
  


  return fig